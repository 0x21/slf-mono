model Organization {
    id                   String                            @id @default(uuid())
    slug                 String                            @unique
    name                 String
    description          String?
    image                String?
    createdAt            DateTime                          @default(now())
    updatedAt            DateTime                          @updatedAt
    members              OrganizationMember[]
    invites              OrganizationInvite[]
    config               OrganizationConfig?
    notificationConfig   OrganizationNotificationConfig?
    events               Event[]
    notifications        Notification[]
    modules              OrganizationModule[]
    supportTickets       OrganizationSupportTicket[]
    memberSupportTickets OrganizationMemberSupportTicket[]
    organizationEvents   OrganizationEvent[]
    slackChannels        OrganizationSlackChannel[]
}

model OrganizationConfig {
    id             String       @id @default(uuid())
    organizationId String       @unique
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@index([organizationId])
}

model OrganizationModule {
    id             String       @id @default(uuid())
    organizationId String
    name           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@index([organizationId])
}

model OrganizationNotificationConfig {
    id                  String       @id @default(uuid())
    organizationId      String       @unique
    organizationUpdated Boolean      @default(true)
    memberJoined        Boolean      @default(true)
    memberLeft          Boolean      @default(true)
    createdAt           DateTime     @default(now())
    updatedAt           DateTime     @updatedAt
    organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model OrganizationMember {
    id                         String                            @id @default(uuid())
    organizationId             String
    userId                     String
    role                       String
    jobTitle                   String?
    invitedByUserId            String?
    createdAt                  DateTime                          @default(now())
    updatedAt                  DateTime                          @updatedAt
    organization               Organization                      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user                       User                              @relation(fields: [userId], references: [id], onDelete: Cascade)
    invitedByUser              User?                             @relation(name: "invitedUser", fields: [invitedByUserId], references: [id])
    modules                    OrganizationMemberModule[]
    supportTickets             OrganizationMemberSupportTicket[] @relation("supportTickets")
    answeredTickets            OrganizationMemberSupportTicket[] @relation("answeredTickets")
    organizationSupportTickets OrganizationSupportTicket[]       @relation("organizationSupportTicket")
    organizationEvents         OrganizationEvent[]
    slackChannels              OrganizationSlackChannel[]

    @@index([organizationId])
    @@index([userId])
    @@index([invitedByUserId])
}

model OrganizationMemberModule {
    id        String             @id @default(uuid())
    memberId  String
    name      String
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
    member    OrganizationMember @relation(fields: [memberId], references: [id], onDelete: Cascade)

    @@index([memberId])
}

model OrganizationInvite {
    id             String       @id @default(uuid())
    organizationId String
    userId         String
    email          String
    acceptEmail    String?
    status         String // waiting, pending, accepted, rejected, expired
    expiresAt      DateTime?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([organizationId])
    @@index([userId])
}

model OrganizationMemberSupportTicket {
    id              String              @id @default(uuid())
    organizationId  String
    memberId        String
    answeredOwnerId String?
    subject         String
    message         String
    status          String              @default("opened") //opened, in_progress, resolved
    answeredAt      DateTime?
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    organization    Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    member          OrganizationMember  @relation(name: "supportTickets", fields: [memberId], references: [id], onDelete: Cascade)
    answeredOwner   OrganizationMember? @relation(name: "answeredTickets", fields: [answeredOwnerId], references: [id])

    @@index([organizationId])
    @@index([memberId])
    @@index([answeredOwnerId])
}

model OrganizationSupportTicket {
    id              String             @id @default(uuid())
    organizationId  String
    memberId        String
    answeredAdminId String?
    subject         String
    message         String
    status          String             @default("opened") //opened, in_progress, resolved
    answeredAt      DateTime?
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt
    organization    Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    member          OrganizationMember @relation(name: "organizationSupportTicket", fields: [memberId], references: [id], onDelete: Cascade)
    answeredAdmin   User?              @relation(fields: [answeredAdminId], references: [id])

    @@index([organizationId])
    @@index([memberId])
    @@index([answeredAdminId])
}

model Notification {
    id             String       @id @default(uuid())
    organizationId String
    userId         String
    type           String
    title          String
    description    String
    href           String?
    isRead         Boolean      @default(false)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([organizationId])
    @@index([userId])
}

model OrganizationEvent {
    id             String              @id @default(uuid())
    organizationId String
    memberId       String?
    severity       String              @default("info") // verbose, debug, info, warn, error
    source         String              @default("user")
    category       String
    type           String
    action         String // created, deleted, updated, revoked, expired
    status         String // failed, success
    metadata       String? // JSON
    error          String?
    createdAt      DateTime            @default(now())
    updatedAt      DateTime            @updatedAt
    organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    member         OrganizationMember? @relation(fields: [memberId], references: [id], onDelete: SetNull)

    @@index([memberId])
    @@index([organizationId])
}

model OrganizationSlackChannel {
    id                 String              @id @default(uuid())
    memberId           String?
    organizationId     String
    botUserId          String
    channelId          String
    channelName        String
    accessToken        String // TODO encrypt
    teamId             String
    teamName           String
    incomingWebhookUrl String
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    member             OrganizationMember? @relation(fields: [memberId], references: [id], onDelete: SetNull)
    organization       Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@unique([organizationId, channelId])
    @@index([organizationId])
    @@index([memberId])
}
